/* eslint-env jest */

const { compile } = require('../../index.js');

const ENCODING_TESTS = [
  { mnemonic: 'RLC', expected: [0x2] },
  { mnemonic: 'RFC', expected: [0x3] },
  { mnemonic: 'ADI 0x12', expected: [0x4, 0x12] },
  { mnemonic: 'RST 0', expected: [0x5] },
  { mnemonic: 'LAI 0x12', expected: [0x6, 0x12] },
  { mnemonic: 'RET', expected: [0x7] },
  { mnemonic: 'INB', expected: [0x8] },
  { mnemonic: 'DCB', expected: [0x9] },
  { mnemonic: 'RRC', expected: [0xa] },
  { mnemonic: 'RFZ', expected: [0xb] },
  { mnemonic: 'ACI 0x12', expected: [0xc, 0x12] },
  { mnemonic: 'RST 1', expected: [0xd] },
  { mnemonic: 'LBI 0x12', expected: [0xe, 0x12] },
  { mnemonic: 'INC', expected: [0x10] },
  { mnemonic: 'DCC', expected: [0x11] },
  { mnemonic: 'RAL', expected: [0x12] },
  { mnemonic: 'RFS', expected: [0x13] },
  { mnemonic: 'SUI 0x12', expected: [0x14, 0x12] },
  { mnemonic: 'RST 2', expected: [0x15] },
  { mnemonic: 'LCI 0x12', expected: [0x16, 0x12] },
  { mnemonic: 'IND', expected: [0x18] },
  { mnemonic: 'DCD', expected: [0x19] },
  { mnemonic: 'RAR', expected: [0x1a] },
  { mnemonic: 'RFP', expected: [0x1b] },
  { mnemonic: 'SBI 0x12', expected: [0x1c, 0x12] },
  { mnemonic: 'RST 3', expected: [0x1d] },
  { mnemonic: 'LDI 0x12', expected: [0x1e, 0x12] },
  { mnemonic: 'INE', expected: [0x20] },
  { mnemonic: 'DCE', expected: [0x21] },
  { mnemonic: 'RTC', expected: [0x23] },
  { mnemonic: 'NDI 0x12', expected: [0x24, 0x12] },
  { mnemonic: 'RST 4', expected: [0x25] },
  { mnemonic: 'LEI 0x12', expected: [0x26, 0x12] },
  { mnemonic: 'INH', expected: [0x28] },
  { mnemonic: 'DCH', expected: [0x29] },
  { mnemonic: 'RTZ', expected: [0x2b] },
  { mnemonic: 'XRI 0x12', expected: [0x2c, 0x12] },
  { mnemonic: 'RST 5', expected: [0x2d] },
  { mnemonic: 'LHI 0x12', expected: [0x2e, 0x12] },
  { mnemonic: 'INL', expected: [0x30] },
  { mnemonic: 'DCL', expected: [0x31] },
  { mnemonic: 'RTS', expected: [0x33] },
  { mnemonic: 'ORI 0x12', expected: [0x34, 0x12] },
  { mnemonic: 'RST 6', expected: [0x35] },
  { mnemonic: 'LLI 0x12', expected: [0x36, 0x12] },
  { mnemonic: 'RTP', expected: [0x3b] },
  { mnemonic: 'CPI 0x12', expected: [0x3c, 0x12] },
  { mnemonic: 'RST 7', expected: [0x3d] },
  { mnemonic: 'LMI 0x12', expected: [0x3e, 0x12] },
  { mnemonic: 'JFC 0x1234', expected: [0x40, 0x34, 0x12] },
  { mnemonic: 'INP 0', expected: [0x41] },
  { mnemonic: 'CFC 0x1234', expected: [0x42, 0x34, 0x12] },
  { mnemonic: 'INP 1', expected: [0x43] },
  { mnemonic: 'JMP 0x1234', expected: [0x44, 0x34, 0x12] },
  { mnemonic: 'INP 2', expected: [0x45] },
  { mnemonic: 'CAL 0x1234', expected: [0x46, 0x34, 0x12] },
  { mnemonic: 'INP 3', expected: [0x47] },
  { mnemonic: 'JFZ 0x1234', expected: [0x48, 0x34, 0x12] },
  { mnemonic: 'INP 4', expected: [0x49] },
  { mnemonic: 'CFZ 0x1234', expected: [0x4a, 0x34, 0x12] },
  { mnemonic: 'INP 5', expected: [0x4b] },
  { mnemonic: 'INP 6', expected: [0x4d] },
  { mnemonic: 'INP 7', expected: [0x4f] },
  { mnemonic: 'JFS 0x1234', expected: [0x50, 0x34, 0x12] },
  { mnemonic: 'OUT 8', expected: [0x51] },
  { mnemonic: 'CFS 0x1234', expected: [0x52, 0x34, 0x12] },
  { mnemonic: 'OUT 9', expected: [0x53] },
  { mnemonic: 'OUT 10', expected: [0x55] },
  { mnemonic: 'OUT 11', expected: [0x57] },
  { mnemonic: 'JFP 0x1234', expected: [0x58, 0x34, 0x12] },
  { mnemonic: 'OUT 12', expected: [0x59] },
  { mnemonic: 'CFP 0x1234', expected: [0x5a, 0x34, 0x12] },
  { mnemonic: 'OUT 13', expected: [0x5b] },
  { mnemonic: 'OUT 14', expected: [0x5d] },
  { mnemonic: 'OUT 15', expected: [0x5f] },
  { mnemonic: 'JTC 0x1234', expected: [0x60, 0x34, 0x12] },
  { mnemonic: 'OUT 16', expected: [0x61] },
  { mnemonic: 'CTC 0x1234', expected: [0x62, 0x34, 0x12] },
  { mnemonic: 'OUT 17', expected: [0x63] },
  { mnemonic: 'OUT 18', expected: [0x65] },
  { mnemonic: 'OUT 19', expected: [0x67] },
  { mnemonic: 'JTZ 0x1234', expected: [0x68, 0x34, 0x12] },
  { mnemonic: 'OUT 20', expected: [0x69] },
  { mnemonic: 'CTZ 0x1234', expected: [0x6a, 0x34, 0x12] },
  { mnemonic: 'OUT 21', expected: [0x6b] },
  { mnemonic: 'OUT 22', expected: [0x6d] },
  { mnemonic: 'OUT 23', expected: [0x6f] },
  { mnemonic: 'JTS 0x1234', expected: [0x70, 0x34, 0x12] },
  { mnemonic: 'OUT 24', expected: [0x71] },
  { mnemonic: 'CTS 0x1234', expected: [0x72, 0x34, 0x12] },
  { mnemonic: 'OUT 25', expected: [0x73] },
  { mnemonic: 'OUT 26', expected: [0x75] },
  { mnemonic: 'OUT 27', expected: [0x77] },
  { mnemonic: 'JTP 0x1234', expected: [0x78, 0x34, 0x12] },
  { mnemonic: 'OUT 28', expected: [0x79] },
  { mnemonic: 'CTP 0x1234', expected: [0x7a, 0x34, 0x12] },
  { mnemonic: 'OUT 29', expected: [0x7b] },
  { mnemonic: 'OUT 30', expected: [0x7d] },
  { mnemonic: 'OUT 31', expected: [0x7f] },
  { mnemonic: 'ADA', expected: [0x80] },
  { mnemonic: 'ADB', expected: [0x81] },
  { mnemonic: 'ADC', expected: [0x82] },
  { mnemonic: 'ADD', expected: [0x83] },
  { mnemonic: 'ADE', expected: [0x84] },
  { mnemonic: 'ADH', expected: [0x85] },
  { mnemonic: 'ADL', expected: [0x86] },
  { mnemonic: 'ADM', expected: [0x87] },
  { mnemonic: 'ACA', expected: [0x88] },
  { mnemonic: 'ACB', expected: [0x89] },
  { mnemonic: 'ACC', expected: [0x8a] },
  { mnemonic: 'ACD', expected: [0x8b] },
  { mnemonic: 'ACE', expected: [0x8c] },
  { mnemonic: 'ACH', expected: [0x8d] },
  { mnemonic: 'ACL', expected: [0x8e] },
  { mnemonic: 'ACM', expected: [0x8f] },
  { mnemonic: 'SUA', expected: [0x90] },
  { mnemonic: 'SUB', expected: [0x91] },
  { mnemonic: 'SUC', expected: [0x92] },
  { mnemonic: 'SUD', expected: [0x93] },
  { mnemonic: 'SUE', expected: [0x94] },
  { mnemonic: 'SUH', expected: [0x95] },
  { mnemonic: 'SUL', expected: [0x96] },
  { mnemonic: 'SUM', expected: [0x97] },
  { mnemonic: 'SBA', expected: [0x98] },
  { mnemonic: 'SBB', expected: [0x99] },
  { mnemonic: 'SBC', expected: [0x9a] },
  { mnemonic: 'SBD', expected: [0x9b] },
  { mnemonic: 'SBE', expected: [0x9c] },
  { mnemonic: 'SBH', expected: [0x9d] },
  { mnemonic: 'SBL', expected: [0x9e] },
  { mnemonic: 'SBM', expected: [0x9f] },
  { mnemonic: 'NDA', expected: [0xa0] },
  { mnemonic: 'NDB', expected: [0xa1] },
  { mnemonic: 'NDC', expected: [0xa2] },
  { mnemonic: 'NDD', expected: [0xa3] },
  { mnemonic: 'NDE', expected: [0xa4] },
  { mnemonic: 'NDH', expected: [0xa5] },
  { mnemonic: 'NDL', expected: [0xa6] },
  { mnemonic: 'NDM', expected: [0xa7] },
  { mnemonic: 'XRA', expected: [0xa8] },
  { mnemonic: 'XRB', expected: [0xa9] },
  { mnemonic: 'XRC', expected: [0xaa] },
  { mnemonic: 'XRD', expected: [0xab] },
  { mnemonic: 'XRE', expected: [0xac] },
  { mnemonic: 'XRH', expected: [0xad] },
  { mnemonic: 'XRL', expected: [0xae] },
  { mnemonic: 'XRM', expected: [0xaf] },
  { mnemonic: 'ORA', expected: [0xb0] },
  { mnemonic: 'ORB', expected: [0xb1] },
  { mnemonic: 'ORC', expected: [0xb2] },
  { mnemonic: 'ORD', expected: [0xb3] },
  { mnemonic: 'ORE', expected: [0xb4] },
  { mnemonic: 'ORH', expected: [0xb5] },
  { mnemonic: 'ORL', expected: [0xb6] },
  { mnemonic: 'ORM', expected: [0xb7] },
  { mnemonic: 'CPA', expected: [0xb8] },
  { mnemonic: 'CPB', expected: [0xb9] },
  { mnemonic: 'CPC', expected: [0xba] },
  { mnemonic: 'CPD', expected: [0xbb] },
  { mnemonic: 'CPE', expected: [0xbc] },
  { mnemonic: 'CPH', expected: [0xbd] },
  { mnemonic: 'CPL', expected: [0xbe] },
  { mnemonic: 'CPM', expected: [0xbf] },
  { mnemonic: 'LAA', expected: [0xc0] },
  { mnemonic: 'LAB', expected: [0xc1] },
  { mnemonic: 'LAC', expected: [0xc2] },
  { mnemonic: 'LAD', expected: [0xc3] },
  { mnemonic: 'LAE', expected: [0xc4] },
  { mnemonic: 'LAH', expected: [0xc5] },
  { mnemonic: 'LAL', expected: [0xc6] },
  { mnemonic: 'LAM', expected: [0xc7] },
  { mnemonic: 'LBA', expected: [0xc8] },
  { mnemonic: 'LBB', expected: [0xc9] },
  { mnemonic: 'LBC', expected: [0xca] },
  { mnemonic: 'LBD', expected: [0xcb] },
  { mnemonic: 'LBE', expected: [0xcc] },
  { mnemonic: 'LBH', expected: [0xcd] },
  { mnemonic: 'LBL', expected: [0xce] },
  { mnemonic: 'LBM', expected: [0xcf] },
  { mnemonic: 'LCA', expected: [0xd0] },
  { mnemonic: 'LCB', expected: [0xd1] },
  { mnemonic: 'LCC', expected: [0xd2] },
  { mnemonic: 'LCD', expected: [0xd3] },
  { mnemonic: 'LCE', expected: [0xd4] },
  { mnemonic: 'LCH', expected: [0xd5] },
  { mnemonic: 'LCL', expected: [0xd6] },
  { mnemonic: 'LCM', expected: [0xd7] },
  { mnemonic: 'LDA', expected: [0xd8] },
  { mnemonic: 'LDB', expected: [0xd9] },
  { mnemonic: 'LDC', expected: [0xda] },
  { mnemonic: 'LDD', expected: [0xdb] },
  { mnemonic: 'LDE', expected: [0xdc] },
  { mnemonic: 'LDH', expected: [0xdd] },
  { mnemonic: 'LDL', expected: [0xde] },
  { mnemonic: 'LDM', expected: [0xdf] },
  { mnemonic: 'LEA', expected: [0xe0] },
  { mnemonic: 'LEB', expected: [0xe1] },
  { mnemonic: 'LEC', expected: [0xe2] },
  { mnemonic: 'LED', expected: [0xe3] },
  { mnemonic: 'LEE', expected: [0xe4] },
  { mnemonic: 'LEH', expected: [0xe5] },
  { mnemonic: 'LEL', expected: [0xe6] },
  { mnemonic: 'LEM', expected: [0xe7] },
  { mnemonic: 'LHA', expected: [0xe8] },
  { mnemonic: 'LHB', expected: [0xe9] },
  { mnemonic: 'LHC', expected: [0xea] },
  { mnemonic: 'LHD', expected: [0xeb] },
  { mnemonic: 'LHE', expected: [0xec] },
  { mnemonic: 'LHH', expected: [0xed] },
  { mnemonic: 'LHL', expected: [0xee] },
  { mnemonic: 'LHM', expected: [0xef] },
  { mnemonic: 'LLA', expected: [0xf0] },
  { mnemonic: 'LLB', expected: [0xf1] },
  { mnemonic: 'LLC', expected: [0xf2] },
  { mnemonic: 'LLD', expected: [0xf3] },
  { mnemonic: 'LLE', expected: [0xf4] },
  { mnemonic: 'LLH', expected: [0xf5] },
  { mnemonic: 'LLL', expected: [0xf6] },
  { mnemonic: 'LLM', expected: [0xf7] },
  { mnemonic: 'LMA', expected: [0xf8] },
  { mnemonic: 'LMB', expected: [0xf9] },
  { mnemonic: 'LMC', expected: [0xfa] },
  { mnemonic: 'LMD', expected: [0xfb] },
  { mnemonic: 'LME', expected: [0xfc] },
  { mnemonic: 'LMH', expected: [0xfd] },
  { mnemonic: 'LML', expected: [0xfe] },
  { mnemonic: 'HLT', expected: [0xff] },
];

const matchParseResults = (sourceCode, expected, error) => {
  const { errors, bytecode } = compile(sourceCode) || {};

  if (error) {
    expect(errors).toHaveLength(1);
    expect(errors[0].message).toEqual(error);
  } else {
    expect(errors).toBeUndefined();
    expect(Array.from(bytecode)).toStrictEqual(expected);
  }
};

describe('Simple encoding', () => {
  for (const { mnemonic, expected } of ENCODING_TESTS) {
    test(mnemonic, () => matchParseResults(mnemonic, expected));
  }
});

describe('labels', () => {
  test('valid', () => matchParseResults('label: LAA\nCAL label', [0xC0, 0x46, 0x00, 0x00]));
  test('duplicated label', () => matchParseResults('label: LAA\nlabel: LAA', null, 'Duplicated definition for label'));
  test('missing label', () => matchParseResults('CAL unk', null, 'Error: Unknown label unk'));
});

describe('incorrect values', () => {
  test('RST', () => matchParseResults('RST 9', null, 'Error: Incorrect argument, subroutine number should be less than 8'));
  test('INP', () => matchParseResults('INP 9', null, 'Error: Incorrect argument, device number should be less than 8'));
  test('OUT', () => matchParseResults('OUT 1', null, 'Error: Incorrect argument, device number should be in range [8..32]'));
  test('OUT', () => matchParseResults('OUT 33', null, 'Error: Incorrect argument, device number should be in range [8..32]'));
  test('LMI', () => matchParseResults('LMI 0x100', null, 'Error: Incorrect argument, immediate value should fit into single byte'));
  test('address instead of imm', () => matchParseResults('RST label', null, 'Expecting token of type --> Imm <-- but found --> \'label\' <--'));
  test('missing value', () => matchParseResults('RST', null, 'Expecting token of type --> Imm <-- but found --> \'\' <--'));
  test('extra value', () => matchParseResults('RET 1', null, 'Redundant input, expecting EOF but found: 1'));
  test('unknown token', () => matchParseResults('RET;', null, 'unexpected character: ->;<- at offset: 3, skipped 1 characters.'));
});
